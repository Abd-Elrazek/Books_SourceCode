--- server_basic.cc	2018-05-19 15:37:53.661079635 +0800
+++ server_threadpool.cc	2018-05-19 15:37:53.661079635 +0800
@@ -3,6 +3,7 @@
 #include <muduo/base/Atomic.h>
 #include <muduo/base/Logging.h>
 #include <muduo/base/Thread.h>
+#include <muduo/base/ThreadPool.h>
 #include <muduo/net/EventLoop.h>
 #include <muduo/net/InetAddress.h>
 #include <muduo/net/TcpServer.h>
@@ -18,8 +19,9 @@
 class SudokuServer
 {
  public:
-  SudokuServer(EventLoop* loop, const InetAddress& listenAddr)
+  SudokuServer(EventLoop* loop, const InetAddress& listenAddr, int numThreads)
     : server_(loop, listenAddr, "SudokuServer"),
+      numThreads_(numThreads),
       startTime_(Timestamp::now())
   {
     server_.setConnectionCallback(
@@ -30,6 +32,8 @@
 
   void start()
   {
+    LOG_INFO << "starting " << numThreads_ << " threads.";
+    threadPool_.start(numThreads_);
     server_.start();
   }
 
@@ -92,16 +96,7 @@
 
     if (puzzle.size() == implicit_cast<size_t>(kCells))
     {
-      LOG_DEBUG << conn->name();
-      string result = solveSudoku(puzzle);
-      if (id.empty())
-      {
-        conn->send(result+"\r\n");
-      }
-      else
-      {
-        conn->send(id+":"+result+"\r\n");
-      }
+      threadPool_.run(std::bind(&solve, conn, puzzle, id));
     }
     else
     {
@@ -110,16 +105,39 @@
     return goodRequest;
   }
 
+  static void solve(const TcpConnectionPtr& conn,
+                    const string& puzzle,
+                    const string& id)
+  {
+    LOG_DEBUG << conn->name();
+    string result = solveSudoku(puzzle);
+    if (id.empty())
+    {
+      conn->send(result+"\r\n");
+    }
+    else
+    {
+      conn->send(id+":"+result+"\r\n");
+    }
+  }
+
   TcpServer server_;
+  ThreadPool threadPool_;
+  int numThreads_;
   Timestamp startTime_;
 };
 
 int main(int argc, char* argv[])
 {
   LOG_INFO << "pid = " << getpid() << ", tid = " << CurrentThread::tid();
+  int numThreads = 0;
+  if (argc > 1)
+  {
+    numThreads = atoi(argv[1]);
+  }
   EventLoop loop;
   InetAddress listenAddr(9981);
-  SudokuServer server(&loop, listenAddr);
+  SudokuServer server(&loop, listenAddr, numThreads);
 
   server.start();
 
